{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "285b9662-4964-49a0-8628-d62ac2b93c7b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "beeae434-c08c-4dfa-b76f-17a725ddff99",
   "metadata": {},
   "outputs": [],
   "source": [
    "text_ds = tf.data.Dataset.list_files('review/*/*', shuffle=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f5513b7b-ed70-4415-8988-6c64e91a92aa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "b'review\\\\negative\\\\neg_1.txt'\n",
      "b'review\\\\negative\\\\neg_2.txt'\n",
      "b'review\\\\negative\\\\neg_3.txt'\n",
      "b'review\\\\positive\\\\pos_1.txt'\n",
      "b'review\\\\positive\\\\pos_2.txt'\n",
      "b'review\\\\positive\\\\pos_3.txt'\n"
     ]
    }
   ],
   "source": [
    "for file in text_ds:\n",
    "    print(file.numpy())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1e891a3e-7d8f-4eae-bb36-72f811392fd0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os \n",
    "def extract_review_and_label(file_path):\n",
    "    return tf.io.read_file(file_path), tf.strings.split(file_path, os.path.sep)[-2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "7027d63b-5cfb-49a9-b0db-a4a86345d2e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Review:  b'Basic'\n",
      "Label:  b'negative'\n",
      "Review:  b'This '\n",
      "Label:  b'negative'\n",
      "Review:  b''\n",
      "Label:  b'negative'\n",
      "Review:  b'One o'\n",
      "Label:  b'positive'\n",
      "Review:  b'A won'\n",
      "Label:  b'positive'\n",
      "Review:  b''\n",
      "Label:  b'positive'\n"
     ]
    }
   ],
   "source": [
    "text_ds_1 = text_ds.map(extract_review_and_label)\n",
    "for review, label in text_ds_1:\n",
    "    print('Review: ', review.numpy()[:5])\n",
    "    print('Label: ', label.numpy())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1381d4a2-b23b-43fb-a575-a6222b24a441",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Review:  b\"Basically there's a family where a little boy (Jak\"\n",
      "Label  b'negative'\n",
      "Review:  b'This show was an amazing, fresh & innovative idea '\n",
      "Label  b'negative'\n",
      "Review:  b'One of the other reviewers has mentioned that afte'\n",
      "Label  b'positive'\n",
      "Review:  b'A wonderful little production. <br /><br />The fil'\n",
      "Label  b'positive'\n"
     ]
    }
   ],
   "source": [
    "text_ds_2 = text_ds_1.filter(lambda review, label: review!=\"\")\n",
    "for review, label in text_ds_2.as_numpy_iterator():\n",
    "    print('Review: ', review[:50])\n",
    "    print('Label ', label)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cbeaa8bc-ca9b-4c33-97bc-3fdc0eacc058",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Review:  b'This show was an amazing, fresh & innovative idea '\n",
      "Label:  b'negative'\n",
      "Review:  b'One of the other reviewers has mentioned that afte'\n",
      "Label:  b'positive'\n",
      "Review:  b'A wonderful little production. <br /><br />The fil'\n",
      "Label:  b'positive'\n",
      "Review:  b\"Basically there's a family where a little boy (Jak\"\n",
      "Label:  b'negative'\n"
     ]
    }
   ],
   "source": [
    "final_ds = text_ds.map(extract_review_and_label).filter(lambda review, label: review!=\"\").shuffle(3)\n",
    "for review, label in final_ds.as_numpy_iterator():\n",
    "    print('Review: ', review[:50])\n",
    "    print('Label: ', label)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "99c88dce-d1a0-483d-9693-c5f80e2e6cea",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'MapDataset' object has no attribute 'numpy'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[13], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[43mtext_ds_1\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mnumpy\u001b[49m()[\u001b[38;5;241m0\u001b[39m])\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'MapDataset' object has no attribute 'numpy'"
     ]
    }
   ],
   "source": [
    "print(text_ds_1.numpy()[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5d4a4281-113e-4687-8de4-134e1dbc965d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
